public class Main {
    public static void main(String[] args) {
        System.out.println("Hello world!");
        String phone = "+924 620-33-03";
        phone = phone.replace("-", "");
        phone = phone.replace(" ", "");
        phone = phone.replace("+", "");
        if (phone.length()==10) {
          phone = '7' + phone;
        } else if (phone.length()>11) {
            throw new RuntimeException(" телефон слишком длинный");
        } else if (phone.length() < 10) {
            throw new RuntimeException(" телефон слишком короткий");
        } else if (phone.length() == 11 && phone.charAt(0) != '7') {
            throw new RuntimeException("среди нас посторонний");
        }
        System.out.println("phone = " + phone);
        String expectedPhone = "79246203303";
        if (phone.equals(expectedPhone)) {
            System.out.println("успех");
        } else {
            System.out.println("неудача");
        }
//        Различные проверки строки
        String s = "abcde”";

        s.contains("bcd");
// true, так как строка s действительно содержит внутри себя последовательность символов “bcd”

        s.endsWith("de");
// true, так как строка s действительно заканчивается на “de”

        s.startsWith("ab");
// true, так как строка s действительно начинается с “ab”

        s.equals("abcde");
// true, так как содержимое строк равно

        s.equalsIgnoreCase("ABCDE");
// true, так как при приведении к нижнему регистру содержимое строк равно

        s.isEmpty();
// false, так как s.length() не равен 0

        s.isBlank();
// false, так как s.length() не равен 0 и имеет буквы и/или числа

        " ".isBlank();
// true, так как строка не имеет внутри букв и чисел, но состоит из пробелов, т. е. пуста (этот метод отсутствует в 8-й версии Java)

//        Другие популярные методы для работы со строками
        String s = "abcde";
        char c = s.charAt(2);
/* c будет инициализировано значением c, так как именно оно стоит
на третьей позиции в строке s (строка — это массив, т. е. 3-я позиция
располагается под индексом 2) */

        s = “abcd”;
        String s1 = s.toUpperCase();
/* s1 будет присвоена копия строки s, где все символы будут в верхнем
регистре, т. е. “ABCD” */

        s = “ABCD”;
        String s1 = s.toLowerCase();
/* s1 будет присвоено значение строки s, но все символы снова перейдут
 в нижний регистр, т. е. “abcd” */

        s = “   abcd    “;
        String s1 = s.trim();
/* s1 будет присвоено значение строки s, но без «лидирующих» и
«завершающих» пробелов, они будут удалены, т. е. “abcd” */

        s = “My name is Ivan”;
        String[] words = s.split(“ “);
/* Данный метод создаст из строки массив, разбив ее на части.
Разделитель указывается в скобках. Мы указали в скобках пробел,
следовательно, делить строку на элементы метод будет в тех местах,
где стоит пробел, т. е. words будет равно {“My”, “name”, “is”, “Ivan”} */

        s = “abcd”;
        char[] c = s.toCharArray();
/* Преобразует строку в массив символов, присвоив c массив
вида {‘a’, ‘b’, ‘c’, ‘d’} */

        s = “abcdef”;
        String s1 = s.substring(2, 4);
/* s1 получит значение, которое находится в строке s, начиная
с индекса 2 включительно и заканчивая индексом 4 не включительно, т. е. “cd” */

        s = “ab c de”;
        String s1 = s.replace(‘ ‘, ‘’);
/* s1 получит копию строки s, но из этой копии будут удалены все
 пробелы (заменены символы из первого параметра (пробел) на символ
из второго параметра (пустая строка)) */

        String s2 = s.replace(‘a’, ‘b’);
/* s2 получит строку s, где все символы ‘a’ (первый параметр)
будут заменены на ‘b’ (второй параметр), т. е. “bb c de” */

        s = “#”;
        String s1 = s.repeat(10);
/* s1 получит строку s, которая будет повторена 10 раз (значение из скобок),
т. е. “##########” */

    }
}